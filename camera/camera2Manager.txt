package cn.com.aratek.iattendance.module.camera;

import android.content.Context;
import android.graphics.ImageFormat;
import android.graphics.Matrix;
import android.graphics.RectF;
import android.graphics.SurfaceTexture;
import android.hardware.camera2.CameraAccessException;
import android.hardware.camera2.CameraCaptureSession;
import android.hardware.camera2.CameraCharacteristics;
import android.hardware.camera2.CameraDevice;
import android.hardware.camera2.CameraManager;
import android.hardware.camera2.CameraMetadata;
import android.hardware.camera2.CaptureRequest;
import android.hardware.camera2.params.StreamConfigurationMap;
import android.media.Image;
import android.media.ImageReader;
import android.os.Handler;
import android.os.HandlerThread;
import android.support.annotation.NonNull;
import android.util.Log;
import android.util.Size;
import android.view.Surface;
import android.view.TextureView;

import java.lang.ref.WeakReference;
import java.util.Arrays;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.Semaphore;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.ReentrantLock;

import cn.com.aratek.aralogger.AraLogger;

public class Camera2Manager {

    private static final String TAG = "Camera2Manager";
    private Size mPreviewSize;
    private int mRotation;
    private Context mContext;
    private String mCameraId = "0";
    public static final String CAMERA_ID_FRONT = "1";
    public static final String CAMERA_ID_BACK = "0";
    private volatile static Camera2Manager instance;
    /**
     * 用于防止应用程序退出前 ，关闭相机
     */
    protected static final Semaphore mCameraOpenCloseLock = new Semaphore(1);
    /**
     * 相机设备
     */
    protected CameraDevice mCameraDevice;

    /**
     * TextureView的生命周期，事件回调。
     */
    protected final TextureView.SurfaceTextureListener mSurfaceTextureListener = new TextureView.SurfaceTextureListener() {
        @Override
        public void onSurfaceTextureAvailable(SurfaceTexture surface, int width, int height) {
            Log.i(TAG, "onSurfaceTextureAvailable");
            if (mCameraDevice == null) {
                AraLogger.e("相机被关闭了,重新开启相机");
                if (countDownLatch == null) {
                    countDownLatch = new CountDownLatch(1);
                }
                openCamera();
                try {
                    countDownLatch.await(3000, TimeUnit.MICROSECONDS);
                    configureTransform(width, height);
                    startPreview();
                    countDownLatch = null;
                } catch (Exception e) {
                    AraLogger.e(e.getMessage());
                    countDownLatch.countDown();
                    countDownLatch = null;
                }
            } else {
                configureTransform(width, height);
                startPreview();
            }
        }

        @Override
        public void onSurfaceTextureSizeChanged(SurfaceTexture surface, int width, int height) {
            AraLogger.e( "onSurfaceTextureSizeChanged");
            configureTransform(width, height);
        }

        @Override
        public boolean onSurfaceTextureDestroyed(SurfaceTexture surface) {
            AraLogger.e(" onSurfaceTextureDestroyed");
            return true;
        }

        @Override
        public void onSurfaceTextureUpdated(SurfaceTexture surface) {
        }
    };
    /**
     * 当相机设备的状态发生改变的时候，将会回调。
     */
    protected final CameraDevice.StateCallback mDeviceStateCallback = new CameraDevice.StateCallback() {
        /**
         * 当相机打开的时候，调用
         * @param cameraDevice
         */
        @Override
        public void onOpened(@NonNull CameraDevice cameraDevice) {
            // 释放掉那个锁
            mCameraOpenCloseLock.release();
            mCameraDevice = cameraDevice;
            AraLogger.e("Camera2Manager:onOpened");
            if (countDownLatch != null) {
                countDownLatch.countDown();
            }
        }

        @Override
        public void onDisconnected(@NonNull CameraDevice cameraDevice) {
            mCameraOpenCloseLock.release();
            cameraDevice.close();
            mCameraDevice = null;
            AraLogger.e("Camera2Manager:onDisconnected");
        }

        /**
         * 发生异常的时候调用
         *
         * 这里释放资源，然后关闭界面
         * @param cameraDevice
         * @param error
         */
        @Override
        public void onError(@NonNull CameraDevice cameraDevice, int error) {
            mCameraOpenCloseLock.release();
            cameraDevice.close();
            mCameraDevice = null;
//            Activity activity = getTextureViewContext();
//            if (null != activity) {
//                activity.finish();
//            }
            AraLogger.e("Camera2Manager:onError:" + error);
        }

        @Override
        public void onClosed(@NonNull CameraDevice camera) {
            super.onClosed(camera);
            AraLogger.e("Camera2Manager:onClosed");
        }
    };
    private ImageReader mImageReader;
    private Handler mBackgroundHandler;
    private int mSensorOrientation;
    private TextureView mTextureView;
    private CaptureRequest.Builder mPreviewBuilder;
    private CameraCaptureSession mPreviewSession;
    private CameraProcessListener mCameraProcessListener;
    private HandlerThread mBackgroundThread;

    private CameraCaptureSession.StateCallback mCaptureStateCallback = new CameraCaptureSession.StateCallback() {

        @Override
        public void onConfigured(@NonNull CameraCaptureSession cameraCaptureSession) {
            AraLogger.e("onConfigured: ");

            // When the session is ready, we start displaying the preview.
            mPreviewSession = cameraCaptureSession;
            updatePreview();
        }

        @Override
        public void onConfigureFailed(@NonNull CameraCaptureSession cameraCaptureSession) {
            AraLogger.e( "onConfigureFailed: ");
        }
    };
    private volatile CountDownLatch countDownLatch;

    public static Camera2Manager getInstance() {
        if (instance == null) {
            synchronized (Camera2Manager.class) {
                if (instance == null) {
                    instance = new Camera2Manager();
                }
            }
        }
        return instance;
    }

    public void init(Context context, String cameraId, Size previewSize, int rotation) {
        mContext = context;
        mCameraId = cameraId;
        mPreviewSize = previewSize;
        mRotation = rotation;
    }

    private Camera2Manager() {
    }

    public void setOnCameraListener(CameraProcessListener listener) {
        mCameraProcessListener = listener;
    }


    public void setTextureView(TextureView textureView) {
        mTextureView = textureView;
        mTextureView.setSurfaceTextureListener(mSurfaceTextureListener);
    }

    public TextureView getTextureView() {
        return mTextureView;
    }

    public void openCamera() {
        startBackgroundThread();
        CameraManager cameraManager = (CameraManager) mContext.getSystemService(Context.CAMERA_SERVICE);
        try {
            setUpCameraOutputs(cameraManager);
            if (!mCameraOpenCloseLock.tryAcquire(2500, TimeUnit.MILLISECONDS)) {
                throw new RuntimeException("Time out waiting to lock camera opening.");
            }
            cameraManager.openCamera(mCameraId, mDeviceStateCallback, mBackgroundHandler);
        } catch (Exception e) {
            AraLogger.e("打开相机错误：" + e.getMessage());
        }
    }


    public void startPreview() {
        Log.i(TAG, "startPreview");
        TextureView textureView = getTextureView();
        if (textureView == null || null == mCameraDevice || null == mPreviewSize) {
            AraLogger.e("开始预览条件不满足");
            return;
        }
        //开始相机预览
        try {
            closePreviewSession();
            SurfaceTexture texture = textureView.getSurfaceTexture();
            assert texture != null;
            texture.setDefaultBufferSize(mPreviewSize.getWidth(), mPreviewSize.getHeight());
            mPreviewBuilder = mCameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW);
            Surface previewSurface = new Surface(texture);
            mPreviewBuilder.set(CaptureRequest.CONTROL_AF_MODE, CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE);
            mPreviewBuilder.addTarget(previewSurface);
            mPreviewBuilder.addTarget(mImageReader.getSurface());
            mCameraDevice.createCaptureSession(Arrays.asList(previewSurface, mImageReader.getSurface()), mCaptureStateCallback, mBackgroundHandler);
        } catch (Exception e) {
            e.printStackTrace();
            AraLogger.e("开启预览错误：" + e.getMessage());
        }
    }

    public void stopPreview() {
        Log.i(TAG, "stopPreview");
        try {
            mCameraOpenCloseLock.acquire();

            closePreviewSession();

        } catch (Exception e) {
            throw new RuntimeException("Interrupted while trying to lock camera closing.");
        } finally {
            mCameraOpenCloseLock.release();
        }

    }

    public synchronized void closeCamera() {

        try {
            mCameraOpenCloseLock.acquire();
            closePreviewSession();
            if (null != mCameraDevice) {
                mCameraDevice.close();
                mCameraDevice = null;
            }
            if (null != mImageReader) {
                mImageReader.close();
                mImageReader = null;
            }
        } catch (Exception e) {
            AraLogger.e("closeCamera错误：" + e.getMessage());
        } finally {
            mCameraOpenCloseLock.release();
        }
        stopBackgroundThread();
    }

    /*
     * 在 startPreView()之后执行用于更新相机预览界面
     */
    private void updatePreview() {
        if (null == mCameraDevice || mPreviewSession == null) {
            return;
        }
        try {
            setUpCaptureRequestBuilder(mPreviewBuilder);
            mPreviewSession.setRepeatingRequest(mPreviewBuilder.build(), null, mBackgroundHandler);
        } catch (Exception e) {
            e.printStackTrace();
            AraLogger.e("updatePreview错误：" + e.getMessage());
        }
    }

    private void configureTransform(int viewWidth, int viewHeight) {
        if (null == getTextureView() || null == mPreviewSize) {
            return;
        }
        TextureView textureView = getTextureView();
        Matrix matrix = new Matrix();
        RectF viewRect = new RectF(0, 0, viewWidth, viewHeight);
        RectF bufferRect = new RectF(0, 0, mPreviewSize.getHeight(), mPreviewSize.getWidth());
        float centerX = viewRect.centerX();
        float centerY = viewRect.centerY();
        if (Surface.ROTATION_90 == mRotation || Surface.ROTATION_270 == mRotation) {
            bufferRect.offset(centerX - bufferRect.centerX(), centerY - bufferRect.centerY());
            matrix.setRectToRect(viewRect, bufferRect, Matrix.ScaleToFit.FILL);
            float scale = Math.max(
                    (float) viewHeight / mPreviewSize.getHeight(),
                    (float) viewWidth / mPreviewSize.getWidth());
            matrix.postScale(scale, scale, centerX, centerY);
            matrix.postRotate((90 * (mRotation - 2)) % 360, centerX, centerY);
        } else if (Surface.ROTATION_180 == mRotation) {
            matrix.postRotate(180, centerX, centerY);
        }
//        Log.i(TAG,"configureTransform: " + getCameraOri(mRotation, mCameraId) + "  " + mRotation * 90);
        textureView.setTransform(matrix);
    }

    private void setUpCaptureRequestBuilder(CaptureRequest.Builder builder) {
        builder.set(CaptureRequest.CONTROL_MODE, CameraMetadata.CONTROL_MODE_AUTO);
    }

    private void setUpCameraOutputs(CameraManager cameraManager) {
        try {
            if (configCameraParams(cameraManager, mCameraId)) {
                return;
            }
            for (String cameraId : cameraManager.getCameraIdList()) {
                if (configCameraParams(cameraManager, cameraId)) {
                    return;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            AraLogger.e("setUpCameraOutputs错误：" + e.getMessage());
        }
    }

    private boolean configCameraParams(CameraManager manager, String cameraId) throws CameraAccessException {
        CameraCharacteristics characteristics = manager.getCameraCharacteristics(cameraId);

        StreamConfigurationMap map = characteristics.get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);
        if (map == null) {
            return false;
        }
        mImageReader = ImageReader.newInstance(mPreviewSize.getWidth(), mPreviewSize.getHeight(), ImageFormat.YUV_420_888, 2);
        mImageReader.setOnImageAvailableListener(new OnImageAvailableListenerImpl(), mBackgroundHandler);

        mSensorOrientation = characteristics.get(CameraCharacteristics.SENSOR_ORIENTATION);
        return true;
    }

    private int getCameraOri(int rotation, String cameraId) {
        int degrees = rotation * 90;
        switch (rotation) {
            case Surface.ROTATION_0:
                degrees = 0;
                break;
            case Surface.ROTATION_90:
                degrees = 90;
                break;
            case Surface.ROTATION_180:
                degrees = 180;
                break;
            case Surface.ROTATION_270:
                degrees = 270;
                break;
            default:
                break;
        }
        int result;
        if (CAMERA_ID_FRONT.equals(cameraId)) {
            result = (mSensorOrientation + degrees) % 360;
            result = (360 - result) % 360;
        } else {
            result = (mSensorOrientation - degrees + 360) % 360;
        }
        Log.i(TAG, "getCameraOri: " + rotation + " " + result + " " + mSensorOrientation);
        return result;
    }

    public void closePreviewSession() {
        if (mPreviewSession != null) {
            try {
                mPreviewSession.stopRepeating();
                mPreviewSession.abortCaptures();
            } catch (Exception e) {
                e.printStackTrace();
                AraLogger.e("closePreviewSession错误：" + e.getMessage());
            }
            mPreviewSession.close();
            mPreviewSession = null;
        }
    }

    /**
     * Starts a background thread and its {@link Handler}.
     */
    private void startBackgroundThread() {
        if (mBackgroundThread == null) {
            mBackgroundThread = new HandlerThread("CameraBackground");
            mBackgroundThread.start();
        }
        if (mBackgroundHandler == null) {
            mBackgroundHandler = new Handler(mBackgroundThread.getLooper());
        }
    }

    /**
     * Stops the background thread and its {@link Handler}.
     */
    private void stopBackgroundThread() {
        if (mBackgroundThread != null) {
            mBackgroundThread.quitSafely();
            try {
                mBackgroundThread.join();
                mBackgroundThread = null;
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        if (mBackgroundHandler != null) {
            mBackgroundHandler.removeCallbacksAndMessages(null);
            mBackgroundHandler = null;
        }
    }

    private class OnImageAvailableListenerImpl implements ImageReader.OnImageAvailableListener {
        private byte[] y;
        private byte[] u;
        private byte[] v;
        private ReentrantLock lock = new ReentrantLock();

        @Override
        public void onImageAvailable(ImageReader reader) {
            Image image = reader.acquireNextImage();
            if (image == null) return;

            // Y:U:V == 4:2:2
            if (mCameraProcessListener != null && image.getFormat() == ImageFormat.YUV_420_888) {
                Image.Plane[] planes = image.getPlanes();
                if (planes == null) {
                    Log.i(TAG, "planes==null");
                    return;
                }
                // 加锁确保y、u、v来源于同一个Image
                lock.lock();
                // 重复使用同一批byte数组，减少gc频率
                if (y == null) {
                    y = new byte[planes[0].getBuffer().limit() - planes[0].getBuffer().position()];
                    u = new byte[planes[1].getBuffer().limit() - planes[1].getBuffer().position()];
                    v = new byte[planes[2].getBuffer().limit() - planes[2].getBuffer().position()];
                }
                try {
                    if (image.getPlanes()[0].getBuffer().remaining() == y.length) {
                        planes[0].getBuffer().get(y);
                        planes[1].getBuffer().get(u);
                        planes[2].getBuffer().get(v);
                        mCameraProcessListener.onPreview(y, u, v, mPreviewSize, planes[0].getRowStride());
                    }
                } catch (Exception e) {
                    AraLogger.e("onImageAvailable错误：" + e.getMessage());
                } finally {
                    lock.unlock();
                }
            }
            image.close();
        }
    }
}
