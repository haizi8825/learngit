package cn.com.aratek.iattendance.utils;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.ImageFormat;
import android.graphics.Matrix;
import android.graphics.PointF;
import android.graphics.Rect;
import android.graphics.YuvImage;
import android.media.FaceDetector;
import android.os.Environment;
import android.text.TextUtils;
import android.util.Base64;
import android.util.Log;
import android.view.Gravity;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.EncodeHintType;
import com.google.zxing.MultiFormatWriter;
import com.google.zxing.WriterException;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;

import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.Charset;
import java.util.Hashtable;

import cn.com.aratek.aralogger.AraLogger;
import cn.com.aratek.iattendance.data.instance.Config;

//import android.hardware.Camera;

/**
 * bitmap util
 *
 * @author shuyun
 * Create at 2018/4/27 0027 16:11
 * Change at 2018/4/27 0027 16:11
 */
public class BitmapUtil {

    public static synchronized int[] getFaceField(Bitmap b) {
        int[] res = new int[]{-1, 0, 0, 0};
        if (null == b) {
            return res;
        }
        int ori_w = b.getWidth();
        int ori_h = b.getHeight();
        int numberOfFace = 1;
        float scale = 1;
        if (ori_h > 192 || ori_w > 256) {
            scale = 640 / 256;
        }

        BitmapFactory.Options opt = new BitmapFactory.Options();
        opt.inPreferredConfig = Bitmap.Config.RGB_565;
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        b.compress(Bitmap.CompressFormat.JPEG, 60, baos);
        InputStream is = new ByteArrayInputStream(baos.toByteArray());
        b = BitmapFactory.decodeStream(is, null, opt);
        b = Bitmap.createScaledBitmap(b, 256, 192, false);
        PointF point = new PointF();
        float eyesDistance = 0;
        long time = System.currentTimeMillis();
        try {
            long time1 = System.currentTimeMillis();
            FaceDetector detector = new FaceDetector(b.getWidth(), b.getHeight(), numberOfFace);
            FaceDetector.Face[] face = new FaceDetector.Face[numberOfFace];
            int num = detector.findFaces(b, face);
            if (num == 0) {
                return res;
            }
            face[0].getMidPoint(point);
            eyesDistance = face[0].eyesDistance();
        } catch (Exception e) {
            return res;
        }
        point.x = point.x * scale;
        point.y = point.y * scale;
        eyesDistance *= scale;
        if (eyesDistance > 0 && eyesDistance < 60) {
            return new int[]{-2, 0, 0, 0};
        }
        int left = (int) (point.x - eyesDistance * 1.6);
        int top = (int) (point.y - eyesDistance * 1.0);
        int right = (int) (point.x + eyesDistance * 1.6);
        int bottom = (int) (point.y + eyesDistance * 2.4);

        if (left < 0) {
            left = 0;
        }
        if (top < 0) {
            top = 0;
        }
        if (right > ori_w) {
            right = ori_w;
        }
        if (bottom > ori_h) {
            bottom = ori_h;
        }
        res[0] = top;
        res[1] = bottom;
        res[2] = left;
        res[3] = right;

        return res;
    }

    public static String bitmap2Base64(Bitmap bitmap) {
        if (null == bitmap) {
            return "";
        }
        String result = null;
        ByteArrayOutputStream baos = null;
        try {
            baos = new ByteArrayOutputStream();
            bitmap.compress(Bitmap.CompressFormat.JPEG, 100, baos);

            byte[] bitmapBytes = baos.toByteArray();
            result = android.util.Base64.encodeToString(bitmapBytes, Base64.NO_WRAP);
        } catch (Exception e) {
            Log.w("test", e.getMessage());
        } finally {
            try {
                if (baos != null) {
                    baos.close();
                }
            } catch (IOException e) {
                Log.w("test", e.getMessage());
            }
        }
        if (null == result) {
            result = "";
        }
        return result;
    }

    public static Bitmap base64ToBitmap(String base64Data) {
        Bitmap bitmap = null;
        if (base64Data != null && !"".equals(base64Data)) {
            byte[] bytes = android.util.Base64.decode(base64Data, android.util.Base64.DEFAULT);
            bitmap = BitmapFactory.decodeByteArray(bytes, 0, bytes.length);
        }
        return bitmap;
    }

    @SuppressWarnings("ResultOfMethodCallIgnored")
    public static String saveBitmapFile(Bitmap b, String name) {
        if (null == b) {
            return "";
        }
        String filePath = Config.FILE_PATH_ROOT_PHOTO_TEMP + "/" + name + ".jpg";
        FileOutputStream fos = null;
        try {
            fos = new FileOutputStream(filePath);
            b.compress(Bitmap.CompressFormat.JPEG, 100, fos);
            fos.flush();
            FileDescriptor fd = fos.getFD();
            fd.sync();
        } catch (IOException e) {
            AraLogger.e(e.getMessage());
        } finally {
            if (fos != null) {
                try {
                    fos.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
//        AraLogger.e("保存的路径为 "+filePath);
        return filePath;
    }

    public static String saveBase64ToFile(String base64, String dir, String fileName) {
        if (TextUtils.isEmpty(base64) || TextUtils.isEmpty(dir) || TextUtils.isEmpty(fileName)) {
            return "";
        }
        File file = new File(dir + "/" + fileName);
        byte[] bytes = android.util.Base64.decode(base64, android.util.Base64.DEFAULT);
        FileOutputStream fos = null;
        try {
            fos = new FileOutputStream(file);
            fos.write(bytes);
            FileDescriptor fd = fos.getFD();
            fd.sync();
            fos.flush();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (fos != null) {
                try {
                    fos.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        return file.getPath();
    }

    public static String saveBase64ToDat(String base64, String dir, String name) {
        File file = new File(dir);
        if (!file.exists()) {
            file.mkdirs();
        }
        File f = new File(dir + name + ".dat");
        FileOutputStream fos = null;
        try {
            fos = new FileOutputStream(f);
            fos.write(base64.getBytes(Charset.forName("utf-8")));
            fos.flush();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (fos != null) {
                try {
                    fos.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        return f.getPath();

    }

    public static String saveBitmap2File(Bitmap b, String dir, String fileName) {
        if (null == b) {
            return null;
        }
//        String rootPath = Environment.getExternalStorageDirectory().getAbsolutePath();
//        String folderPath1 = "/iAttendance";
//        String folderPath2 = folderPath1 + "/photo";
        File file = new File(dir + "/" + fileName);
        File folder1 = new File(dir);
//        File folder2 = new File(rootPath + folderPath2);
        if (!folder1.exists()) {
            folder1.mkdirs();
        }
//        if (!folder2.exists()) {
//            folder2.mkdirs();
//        }
//        String filePath = folderPath2+"/"+name+".jpg";
        FileOutputStream fos = null;
        try {
            fos = new FileOutputStream(file);
            b.compress(Bitmap.CompressFormat.JPEG, 100, fos);
            fos.flush();
            FileDescriptor fd = fos.getFD();
            fd.sync();
        } catch (IOException e) {
            AraLogger.e(e.getMessage());
        } finally {
            if (fos != null) {
                try {
                    fos.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (b != null && !b.isRecycled()) {
                b.recycle();
                b = null;
            }
        }

//        AraLogger.e("保存的路径为 "+file.getPath());
        return file.getPath();
    }

    public static Bitmap cutRectBitmap(Bitmap bitmap) {
        if (null == bitmap) {
            return null;
        }
        int w = bitmap.getWidth();
        int h = bitmap.getHeight();
        if (w < h) {
            return bitmap;
        }
        int a = (w - h) / 2;
        try {
            bitmap = Bitmap.createBitmap(bitmap, a, 0, h, h);
        } catch (Exception e) {
            return null;
        }
        return bitmap;
    }

    public static String saveBitmapFile2(Bitmap b, String name) {
        if (null == b) {
            return null;
        }
        String rootPath = Environment.getExternalStorageDirectory().getAbsolutePath();
        String folderPath1 = "/TEMP_PIC";
        String folderPath2 = folderPath1 + "/photo";
        File folder1 = new File(rootPath + folderPath1);
        File folder2 = new File(rootPath + folderPath2);
        if (!folder1.exists()) {
            folder1.mkdirs();
        }
        if (!folder2.exists()) {
            folder2.mkdirs();
        }
        String filePath = folderPath2 + "/" + name + ".jpg";
        BufferedOutputStream bos = null;
        try {
            FileOutputStream fos = new FileOutputStream(rootPath + filePath);
            bos = new BufferedOutputStream(fos);
            b.compress(Bitmap.CompressFormat.JPEG, 100, bos);
            bos.flush();
        } catch (IOException e) {
            AraLogger.e(e.getMessage());
        } finally {
            if (bos != null) {
                try {
                    bos.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        AraLogger.e("保存的路径为 " + filePath);
        return filePath;
    }

    public static Bitmap cutBmp(Bitmap src_bmp, float[] facePos, int previewWidth, int previewHeight) {
        int left = (int) (facePos[0] * 1.0);
        int top = (int) (facePos[1] * 1.0);
        int right = (int) (facePos[2] * 1.0);
        int bottom = (int) (facePos[3] * 1.0);
        if (top < 0) {
            top = 0;
        }
        if (bottom > previewHeight) {
            bottom = previewHeight;
        }
        if (left < 0) {
            left = 0;
        }
        if (right > previewWidth) {
            right = previewWidth;
        }
        return Bitmap.createBitmap(src_bmp, left, top, right - left, bottom - top);
    }

    @SuppressWarnings("NumericOverflow")
    public static Bitmap convertGreyImg(Bitmap img) {
        int width = img.getWidth();
        int height = img.getHeight();
        int[] pixels = new int[width * height];
        img.getPixels(pixels, 0, width, 0, 0, width, height);
        int alpha = 0xFF << 24;
        for (int i = 0; i < height; i++) {
            for (int j = 0; j < width; j++) {
                int grey = pixels[width * i + j];
                int red = ((grey & 0x00FF0000) >> 16);
                int green = ((grey & 0x0000FF00) >> 8);
                int blue = (grey & 0x000000FF);
                grey = (int) ((float) red * 0.3 + (float) green * 0.59 + (float) blue * 0.11);
                grey = alpha | (grey << 16) | (grey << 8) | grey;
                pixels[width * i + j] = grey;
            }
        }
        Bitmap result = Bitmap.createBitmap(width, height, Bitmap.Config.RGB_565);
        result.setPixels(pixels, 0, width, 0, 0, width, height);
        return result;
    }

    public static Bitmap ByteToBitmap(byte[] data, int w, int h) {
        ByteArrayOutputStream baos = null;
        Bitmap bitmapOut = null;
        try {
            YuvImage yuvimage = new YuvImage(data, ImageFormat.NV21, w, h, null);
            baos = new ByteArrayOutputStream();
            yuvimage.compressToJpeg(new Rect(0, 0, w, h), 60, baos);
            byte[] jdata = baos.toByteArray();
            bitmapOut = BitmapFactory.decodeByteArray(jdata, 0, jdata.length);
            if (null == bitmapOut) {
                return bitmapOut;
            }
            jdata = null;
            yuvimage = null;
            Matrix matrix = new Matrix();
            matrix.postRotate(90);
            bitmapOut = Bitmap.createBitmap(bitmapOut, 0, 0, w, h, matrix, false);
            baos.flush();
        } catch (Exception e) {
            AraLogger.e("转换原始数据为位图错误 " + e.getMessage());
        } finally {
            try {
                if (baos != null) {
                    baos.close();
                }
            } catch (Exception e) {
                AraLogger.e("转换原始数据为位图错误2 " + e.getMessage());
            }
        }
        return bitmapOut;
    }

    public static Bitmap createQRCode(String content, int w, int h, Bitmap logo) throws WriterException {
        if (TextUtils.isEmpty(content)) {
            return null;
        }
        /*偏移量*/
        int offsetX = w / 2;
        int offsetY = h / 2;

        /*生成logo*/
        Bitmap logoBitmap = null;

        if (logo != null) {
            Matrix matrix = new Matrix();
            float scaleFactor = Math.min(w * 1.0f / 5 / logo.getWidth(), h * 1.0f / 5 / logo.getHeight());
            matrix.postScale(scaleFactor, scaleFactor);
            logoBitmap = Bitmap.createBitmap(logo, 0, 0, logo.getWidth(), logo.getHeight(), matrix, true);
        }

        /*如果log不为null,重新计算偏移量*/
        int logoW = 0;
        int logoH = 0;
        if (logoBitmap != null) {
            logoW = logoBitmap.getWidth();
            logoH = logoBitmap.getHeight();
            offsetX = (w - logoW) / 2;
            offsetY = (h - logoH) / 2;
        }

        /*指定为UTF-8*/
        Hashtable<EncodeHintType, Object> hints = new Hashtable<EncodeHintType, Object>();
        hints.put(EncodeHintType.CHARACTER_SET, "utf-8");
        //容错级别
        hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);
        //设置空白边距的宽度
        hints.put(EncodeHintType.MARGIN, 0);
        // 生成二维矩阵,编码时指定大小,不要生成了图片以后再进行缩放,这样会模糊导致识别失败
        BitMatrix matrix = new MultiFormatWriter().encode(content,
                BarcodeFormat.QR_CODE, w, h, hints);

        // 二维矩阵转为一维像素数组,也就是一直横着排了
        int[] pixels = new int[w * h];
        for (int y = 0; y < h; y++) {
            for (int x = 0; x < w; x++) {
                if (x >= offsetX && x < offsetX + logoW && y >= offsetY && y < offsetY + logoH) {
                    int pixel = logoBitmap.getPixel(x - offsetX, y - offsetY);
                    if (pixel == 0) {
                        if (matrix.get(x, y)) {
                            pixel = 0xff000000;
                        } else {
                            pixel = 0xffffffff;
                        }
                    }
                    pixels[y * w + x] = pixel;
                } else {
                    if (matrix.get(x, y)) {
                        pixels[y * w + x] = 0xff000000;
                    } else {
                        pixels[y * w + x] = 0xffffffff;
                    }
                }
            }
        }

        Bitmap bitmap = Bitmap.createBitmap(w, h, Bitmap.Config.ARGB_8888);
        bitmap.setPixels(pixels, 0, w, 0, 0, w, h);
        return bitmap;
    }

    public static Bitmap creatBarcode(Context context, String contents,
                                      int desiredWidth, int desiredHeight, boolean displayCode) {
        Bitmap ruseltBitmap = null;
        int marginW = 20;
        BarcodeFormat barcodeFormat = BarcodeFormat.CODE_128;

        if (displayCode) {
            Bitmap barcodeBitmap = encodeAsBitmap(contents, barcodeFormat,
                    desiredWidth, desiredHeight);
            Bitmap codeBitmap = creatCodeBitmap(contents, desiredWidth + 2
                    * marginW, desiredHeight, context);
            ruseltBitmap = mixtureBitmap(barcodeBitmap, codeBitmap, new PointF(
                    0, desiredHeight));
        } else {
            ruseltBitmap = encodeAsBitmap(contents, barcodeFormat,
                    desiredWidth, desiredHeight);
        }
        return ruseltBitmap;
    }

    protected static Bitmap encodeAsBitmap(String contents,
                                           BarcodeFormat format, int desiredWidth, int desiredHeight) {
        final int WHITE = 0xFFFFFFFF;
        final int BLACK = 0xFF000000;

        MultiFormatWriter writer = new MultiFormatWriter();
        BitMatrix result = null;
        try {
            result = writer.encode(contents, format, desiredWidth,
                    desiredHeight, null);
        } catch (WriterException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        int width = result.getWidth();
        int height = result.getHeight();
        int[] pixels = new int[width * height];
        // All are 0, or black, by default
        for (int y = 0; y < height; y++) {
            int offset = y * width;
            for (int x = 0; x < width; x++) {
                pixels[offset + x] = result.get(x, y) ? BLACK : WHITE;
            }
        }

        Bitmap bitmap = Bitmap.createBitmap(width, height,
                Bitmap.Config.ARGB_8888);
        bitmap.setPixels(pixels, 0, width, 0, 0, width, height);
        return bitmap;
    }

    protected static Bitmap creatCodeBitmap(String contents, int width,
                                            int height, Context context) {
        TextView tv = new TextView(context);
        LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(
                ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
        tv.setLayoutParams(layoutParams);
        tv.setText(contents);
        tv.setHeight(height);
        tv.setGravity(Gravity.CENTER_HORIZONTAL);
        tv.setWidth(width);
        tv.setDrawingCacheEnabled(true);
        tv.setTextColor(Color.BLACK);
        tv.measure(View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED),
                View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED));
        tv.layout(0, 0, tv.getMeasuredWidth(), tv.getMeasuredHeight());

        tv.buildDrawingCache();
        Bitmap bitmapCode = tv.getDrawingCache();
        return bitmapCode;
    }

    protected static Bitmap mixtureBitmap(Bitmap first, Bitmap second,
                                          PointF fromPoint) {
        if (first == null || second == null || fromPoint == null) {
            return null;
        }
        int marginW = 20;
        Bitmap newBitmap = Bitmap.createBitmap(
                first.getWidth() + second.getWidth() + marginW,
                first.getHeight() + second.getHeight(), Bitmap.Config.ARGB_4444);
        Canvas cv = new Canvas(newBitmap);
        cv.drawBitmap(first, marginW, 0, null);
        cv.drawBitmap(second, fromPoint.x, fromPoint.y, null);
//        cv.save(Canvas.ALL_SAVE_FLAG);
        cv.restore();
        return newBitmap;
    }

    /**
     *  * 根据分辨率压缩
     *  *
     *  * @param srcPath 图片路径
     *  * @param ImageSize 图片大小 单位kb
     *  * @return
     *  
     */
    public static boolean compressBitmap(String srcPath, int ImageSize, String savePath) {
        int subtract;
//        AraLogger.i("图片处理开始..");
        Bitmap bitmap = compressByResolution(srcPath, 640, 480); //分辨率压缩
        if (bitmap == null) {
//            AraLogger.i("bitmap 为空");
            return false;
        }
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        int options = 100;
        bitmap.compress(Bitmap.CompressFormat.JPEG, options, baos);//质量压缩方法，这里100表示不压缩，把压缩后的数据存放到baos中
//        AraLogger.i("图片分辨率压缩后：" + baos.toByteArray().length / 1024 + "KB");


        while (baos.toByteArray().length > ImageSize * 1024) { //循环判断如果压缩后图片是否大于ImageSize kb,大于继续压缩
            subtract = setSubstractSize(baos.toByteArray().length / 1024);
            baos.reset();//重置baos即清空baos
            options -= subtract;//每次都减少10
            bitmap.compress(Bitmap.CompressFormat.JPEG, options, baos);//这里压缩options%，把压缩后的数据存放到baos中
//            AraLogger.i("图片压缩后：" + baos.toByteArray().length / 1024 + "KB");
        }
//        AraLogger.i("图片处理完成!" + baos.toByteArray().length / 1024 + "KB");
        try {
            FileOutputStream fos = new FileOutputStream(new File(savePath));//将压缩后的图片保存的本地上指定路径中
            fos.write(baos.toByteArray());
            fos.flush();
            fos.close();
        } catch (Exception e) {
            e.printStackTrace();
        }

        bitmap.recycle();

        return true; //压缩成功返回ture
    }


    /**
     * 根据分辨率压缩图片比例
     *
     * @param imgPath
     * @param w
     * @param h
     * @return
     */
    private static Bitmap compressByResolution(String imgPath, int w, int h) {
        BitmapFactory.Options opts = new BitmapFactory.Options();
        opts.inJustDecodeBounds = true;
        BitmapFactory.decodeFile(imgPath, opts);

        int width = opts.outWidth;
        int height = opts.outHeight;
        int widthScale = width / w;
        int heightScale = height / h;

        int scale;
        if (widthScale < heightScale) { //保留压缩比例小的
            scale = widthScale;
        } else {
            scale = heightScale;
        }

        if (scale < 1) {
            scale = 1;
        }

        opts.inSampleSize = scale;

        opts.inJustDecodeBounds = false;

        Bitmap bitmap = BitmapFactory.decodeFile(imgPath, opts);

        return bitmap;
    }

    /**
     * 根据图片的大小设置压缩的比例，提高速度
     *
     * @param imageKB
     * @return
     */
    private static int setSubstractSize(int imageKB) {

        if (imageKB > 1000) {
            return 60;
        } else if (imageKB > 750) {
            return 40;
        } else if (imageKB > 500) {
            return 20;
        } else {
            return 10;
        }

    }

    public static Bitmap getSmallBitmap(String path, int imageSize) {
        if (TextUtils.isEmpty(path)) return null;
        BitmapFactory.Options options = new BitmapFactory.Options();
        options.inPreferredConfig = Bitmap.Config.RGB_565;
        options.inJustDecodeBounds = true;
        BitmapFactory.decodeFile(path, options);

        options.inSampleSize = computeSampleSize(options, -1, imageSize);

        //使用获取到的inSampleSize再次解析图片
        options.inJustDecodeBounds = false;

        Bitmap bitmap = BitmapFactory.decodeFile(path, options);
        return bitmap;
    }

    /**
     * 计算原始大小
     *
     * @param options        解析图片所需的BitmapFactory.Options
     * @param minSideLength  调整后图片最小的宽或高值,一般赋值为 -1
     * @param maxNumOfPixels 调整后图片的内存占用量上限
     * @return
     */
    private static int computeInitialSampleSize(BitmapFactory.Options options, int minSideLength, int maxNumOfPixels) {
        double w = options.outWidth;
        double h = options.outHeight;
        int lowerBound = (maxNumOfPixels == -1) ? 1 : (int) Math.ceil(Math.sqrt(w * h / maxNumOfPixels));
        int upperBound = (minSideLength == -1) ? 128 : (int) Math.min(Math.floor(w / minSideLength), Math.floor(h / minSideLength));
        if (upperBound < lowerBound) {
            // return the larger one when there is no overlapping zone.
            return lowerBound;
        }
        if ((maxNumOfPixels == -1) && (minSideLength == -1)) {
            return 1;
        } else if (minSideLength == -1) {
            return lowerBound;
        } else {
            return upperBound;
        }
    }

    /**
     * 计算压缩的比例
     *
     * @param options        解析图片所需的BitmapFactory.Options
     * @param minSideLength  调整后图片最小的宽或高值,一般赋值为 -1
     * @param maxNumOfPixels 调整后图片的内存占用量上限
     * @return
     */
    public static int computeSampleSize(BitmapFactory.Options options, int minSideLength, int maxNumOfPixels) {
        int initialSize = computeInitialSampleSize(options, minSideLength, maxNumOfPixels);
        int roundedSize;
        if (initialSize <= 8) {
            roundedSize = 1;
            while (roundedSize < initialSize) {
                roundedSize <<= 1;
            }
        } else {
            roundedSize = (initialSize + 7) / 8 * 8;
        }
        return roundedSize;
    }

    public static Bitmap getScaleBitmap(Bitmap bitmap, float[] scaleSize) {

        int bmpWidth = bitmap.getWidth();
        int bmpHeight = bitmap.getHeight();

        scaleSize[0] = 1;
        int maxSize = 260;
//        int maxSize = 200;
        while (true) {
            if (bmpWidth * scaleSize[0] < maxSize || bmpHeight * scaleSize[0] < maxSize) {
                break;
            }
            scaleSize[0] /= 2;
        }
        Matrix matrix = new Matrix();
        matrix.postScale(scaleSize[0], scaleSize[0]);
        return Bitmap.createBitmap(bitmap, 0, 0, bmpWidth, bmpHeight, matrix, true);
    }


    public static Bitmap getCutFaceBitmap(Bitmap bitmap, float scale, int x, int y, int width, int height) {
        Matrix matrix = new Matrix();
        matrix.postScale(scale, scale);
        return Bitmap.createBitmap(bitmap, x, y, width, height, matrix, true);
    }

    /**
     * 通过图片base64流判断图片等于多少字节
     * image 图片流
     */
    public static long imageSize(String image) {
        String str = image.substring(22); // 1.需要计算文件流大小，首先把头部的data:image/png;base64,（注意有逗号）去掉。
        Integer equalIndex = str.indexOf("=");//2.找到等号，把等号也去掉
        if (str.indexOf("=") > 0) {
            str = str.substring(0, equalIndex);
        }
        long strLength = str.length();//3.原来的字符流大小，单位为字节
        long size = strLength - (strLength / 8) * 2;//4.计算后得到的文件流大小，单位为字节
        return size;
    }


}
